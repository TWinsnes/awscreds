# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    working_directory: /go/src/github.com/TWinsnes/awscreds
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      # build and test
      - run: go get -v -t -d ./...
      - run: go build -v
      - run: go test -v -race -cover ./...

  deploy:
    working_directory: /go/src/github.com/TWinsnes/awscreds
    docker:
      - image: circleci/golang:latest

    steps:
      - checkout

      - run:
          name: Setup
          command: |
            go get -v -t -d ./...
            mkdir output
            go build -v -o awscreds .
            ls
            ./awscreds version | sed -e 's/Version: /v./' > versionfile


      - run: 
          name: Build for linux
          environment:
            GOOS: linux
            GOARCH: amd64
          command: |
            go build -v -o awscreds .
            export version=$(cat versionfile)
            echo $version
            zip "output/awscreds_${version}_linux64.zip" awscreds

      # build for macos
      - run: 
          name: Build for macOS
          environment:
            GOOS: darwin
            GOARCH: amd64
          command: |
            go build -v -o awscreds .
            export version=$(cat versionfile)
            echo $version
            zip "output/awscreds_${version}_darwin.zip" awscreds

      # build windows 64 bit
      - run: 
          name: Build Windows 64bit
          environment:
            GOOS: windows
            GOARCH: amd64
          command: | 
            # cross compile to windows in linux requires a few extra bits
            # this gets around permission issues
            sudo chmod -R 0777 /usr/local/go/
            go get github.com/inconshreveable/mousetrap
            go build -v -o awscreds.exe .
            export version=$(cat versionfile)
            echo $version
            zip "output/awscreds_${version}_win64.zip" awscreds.exe

      #build windows 32 bit
      - run: 
          name: Build Windows 32bit
          environment:
            GOOS: windows
            GOARCH: 386
          command: |
            go build -v -o awscreds.exe .
            export version=$(cat versionfile)
            echo $version
            zip "output/awscreds_${version}_win32.zip" awscreds.exe
            pwd

      - run:
          name: Release if new version
          command: |
            export version=$(cat versionfile)
            echo $version
            export tagvalue=$(git tag | grep ${version})
            export prerelease=$(echo ${version} | grep 'pre-release')
            if [ -z "${tagvalue}" ]; then
              go get github.com/tcnksm/ghr

              if [ -z "${prerelease}" ]; then
                echo "Found pre-release in version, creating pre-release"
                ghr -u twinsnes -prerelease ${version} output
              else
                echo "No pre-release in version, creating release"
                ghr -u twinsnes ${version} output
              fi
            fi

      - store_artifacts:
          path: output
          
workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - deploy:
          requires: 
            - build
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/